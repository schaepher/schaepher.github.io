<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Learning Docker - 分类 - Schaepher's Blog</title><link>https://schaepher.github.io/categories/learning-docker/</link><description>Learning Docker - 分类 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 11 Oct 2019 10:22:28 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/categories/learning-docker/" rel="self" type="application/rss+xml"/><item><title>Docker Compose</title><link>https://schaepher.github.io/2019/10/11/docker-series-e2/</link><pubDate>Fri, 11 Oct 2019 10:22:28 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2019/10/11/docker-series-e2/</guid><description><![CDATA[<h2 id="docker-compose-是用来做什么的">Docker Compose 是用来做什么的</h2>
<ol>
<li>最直接的就是把原先要在命令行跑容器所需的参数整合到一个文件（docker-compose.yaml）里面，组织起来。这样就不用怕忘记某个参数了。</li>
<li>可以使用一行简单的命令（docker-compose）同时启动（up）、重启（restart）、关闭（stop）多个服务。</li>
</ol>
<p>开发和测试环境使用另外安装的 <code>docker-compose</code> 命令，单机的生产环境也可用。<br>
生产环境的集群如果是 Docker Swarm，则使用 Docker 自带的 <code>docker stack deploy</code> 。</p>]]></description></item><item><title>Docker 介绍</title><link>https://schaepher.github.io/2019/09/19/docker-series-e1/</link><pubDate>Thu, 19 Sep 2019 19:32:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2019/09/19/docker-series-e1/</guid><description><![CDATA[<h2 id="docker-是用来干嘛的">Docker 是用来干嘛的？</h2>
<p>帮助开发者和系统管理员使用容器开发、部署和运行应用。</p>
<p>对于开发者而言，最直观的感受就是原先我们要跑起来一个已有项目，必须装一大堆依赖。<br>
在没有 Docker 的时候，可以有两种方式：</p>]]></description></item><item><title>Dockerfile</title><link>https://schaepher.github.io/2018/12/09/dockerfile/</link><pubDate>Sun, 09 Dec 2018 12:46:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2018/12/09/dockerfile/</guid><description><![CDATA[<p>Dockerfile 的官方文档：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreffer ">https://docs.docker.com/engine/reference/builder/</a></p>
<h1 id="1-示例">1 示例</h1>
<p>当你想要一个镜像，但它没有办法满足你的所有要求时，就得在它的基础上做一些定制化的修改。此时就得用到 Dockerfile 。</p>
<p>你有两种选择：一种是获取这个镜像的原始 Dockerfile 文件，并在上面修改，从头开始构建镜像；另一种是直接指定已存在的镜像，并添加内容。</p>]]></description></item></channel></rss>