<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Camunda - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/camunda/</link><description>Camunda - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>schaepher@outlook.com (Schaepher)</managingEditor><webMaster>schaepher@outlook.com (Schaepher)</webMaster><lastBuildDate>Fri, 27 Mar 2020 21:27:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/camunda/" rel="self" type="application/rss+xml"/><item><title>一种 Camunda 流程引擎 Adapter 层的实现</title><link>https://schaepher.github.io/2020/03/27/camunda-adapter/</link><pubDate>Fri, 27 Mar 2020 21:27:00 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2020/03/27/camunda-adapter/</guid><description>上一篇说明了选择 Camunda 的理由。这一篇说明如何实现适配层。 当前还没有专门写一篇对 Camunda 各个功能的详细介绍。如果要获得比较直观的感受，可以下载 Modeler 或者使用</description></item><item><title>BPMN 流程引擎 —— Camunda</title><link>https://schaepher.github.io/2020/03/25/camunda/</link><pubDate>Wed, 25 Mar 2020 12:31:00 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2020/03/25/camunda/</guid><description>2019 年初我在重新设计我们组负责的流程系统时，选择了 Camunda 流程引擎，并基于该流程引擎实现了一套适配方案。以前就想做一次总结，但总拖着。 最近公司中台在</description></item><item><title>Camunda 流程图配置</title><link>https://schaepher.github.io/2017/04/02/camunda-basic/</link><pubDate>Sun, 02 Apr 2017 22:59:00 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2017/04/02/camunda-basic/</guid><description>结果 收到结果后，有三种方式设置结果变量到变量仓库。 Input/Output 每个变量一个 Output Input/Output 一个变量内同时设置多个变量 Listener 里面设置 end 类型，并同时设置多个变量 Response 是 Jso</description></item></channel></rss>