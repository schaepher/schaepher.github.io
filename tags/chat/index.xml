<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>chat - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/chat/</link><description>chat - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>schaepher@outlook.com (Schaepher)</managingEditor><webMaster>schaepher@outlook.com (Schaepher)</webMaster><lastBuildDate>Tue, 19 Apr 2022 13:39:48 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/chat/" rel="self" type="application/rss+xml"/><item><title>网络 I/O 多路复用</title><link>https://schaepher.github.io/2022/04/19/network-io-reuse/</link><pubDate>Tue, 19 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/19/network-io-reuse/</guid><description>legend: io复用 legend: epoll，X哥不如先说说 Schaepher: i/o 复用是为了解决什么问题 legend: 主要是复用线程，减少cpu等待 legend: 吧 Schaepher: 复用线程指的是怎么复用？ legend: 这个复用说的</description></item><item><title>Golang Select Deadlock</title><link>https://schaepher.github.io/2022/04/18/golang-select-deadlock/</link><pubDate>Mon, 18 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/18/golang-select-deadlock/</guid><description>legend: 文章：一个select死锁问题 legend: 我咋感觉这个。。。和select没关呢 Schaepher: 我觉得问题应该是：为什么要这么写。 legend: 就是 Schaepher: 是有工程上的好处，还是执</description></item><item><title>MySQL Row Count</title><link>https://schaepher.github.io/2022/04/18/mysql-row-count/</link><pubDate>Mon, 18 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/18/mysql-row-count/</guid><description>legend: InnoDB中为何不像MyISAM那样维护一个row_count变量呢？ Schaepher: 变量的修改需要加锁 legend: 不= = legend: 那MyISAM就不用加锁了？ Schaepher: 要啊，</description></item><item><title>MySQL Index</title><link>https://schaepher.github.io/2022/04/13/mysql-index/</link><pubDate>Wed, 13 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/13/mysql-index/</guid><description>Schaepher: 那索引开始 legend: 1,2,5 legend: 1,2,6 legend: 先回答 Schaepher: 锁粒度涉及到的是意向锁 Schaepher: mvcc 实现原理是快照读。用 undo log 的回滚段存储旧版本数据。 Schaepher: 事务特性：ACID，原子性，一致性</description></item><item><title>MySQL MVCC</title><link>https://schaepher.github.io/2022/04/12/mvcc/</link><pubDate>Tue, 12 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/12/mvcc/</guid><description>legend: mvcc开卷 legend: 卷mvcc好像要理解好多东西。。。。。。。。。 legend: 我刚看了篇文章 legend: 直接把我干废了 Schaepher: 让我也废一下 legend: 他先从 锁开始 legend: 悲观锁，2阶段锁</description></item><item><title>Golang sync.pool</title><link>https://schaepher.github.io/2022/04/07/golang-sync-pool/</link><pubDate>Thu, 07 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/07/golang-sync-pool/</guid><description>Schaepher: 先卷个 sync.pool Schaepher: legend: 我刚回忆了下 legend: 主要是他有个lock free的设计 legend: 他怎么做到的 legend: 好像是单线程操作 Schaepher:</description></item><item><title>InfluxDB raft 使用</title><link>https://schaepher.github.io/2022/04/06/influx-raft/</link><pubDate>Wed, 06 Apr 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/04/06/influx-raft/</guid><description>Schaepher: 我去瞄一眼 influx 的集群怎么用 raft Schaepher: 看了个大概 legend: 开始你的表演 Schaepher: 就一个新的操作，先 Propose，如果成功，就可以从 commited 里取出 Propose 的内容 Schaepher: 内容可以是任意</description></item><item><title>Raft 原理</title><link>https://schaepher.github.io/2022/03/30/raft/</link><pubDate>Wed, 30 Mar 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/03/30/raft/</guid><description>legend: 双leader的时候，你发写操作是不是发两个 legend: 然后一个是能同步半数以上 legend: 一个不能 Schaepher: 发一个 Schaepher: 有可能发到少数方的 legend: 但是这次写肯定是失败的 Schaepher: 嗯 legend:</description></item><item><title>一致性</title><link>https://schaepher.github.io/2022/03/30/consistency/</link><pubDate>Wed, 30 Mar 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/03/30/consistency/</guid><description>Schaepher: 一致性分为哪两类 legend: 母鸡。。。 legend: 强一致？ Schaepher: 强一致和最终一致 Schaepher: 强一致性算法目前流行的是？ legend: raft？ Schaepher: 啊对 legend: raft是啥一致性= = Schaepher: raft 的 leader 选举</description></item><item><title>CPU 中断</title><link>https://schaepher.github.io/2022/02/16/system-interrupt/</link><pubDate>Wed, 16 Feb 2022 13:39:48 +0000</pubDate><author>Schaepher</author><guid>https://schaepher.github.io/2022/02/16/system-interrupt/</guid><description>legend: 假设只有一个CPU，CPU正在运行用户的程序，那么操作系统要如何夺回CPU使用权？ Schaepher: 操作系统不是分配了时间片么，时间片运行完就返回给操作系</description></item></channel></rss>