<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>GO - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/go/</link><description>GO - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 11 Apr 2020 16:21:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/go/" rel="self" type="application/rss+xml"/><item><title>第一个 Go 语言程序：漫画下载器</title><link>https://schaepher.github.io/2020/04/11/golang-first-comic-downloader/</link><pubDate>Sat, 11 Apr 2020 16:21:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/04/11/golang-first-comic-downloader/</guid><description><![CDATA[<p>原文地址：</p>
<blockquote>
<p>第一个 Go 语言程序：漫画下载器： <br>
<a href="https://schaepher.github.io/2020/04/11/golang-first-comic-downloader" target="_blank" rel="noopener noreffer ">https://schaepher.github.io/2020/04/11/golang-first-comic-downloader</a></p></blockquote>
<p>之前学了点 Go 语言，但没有写出一个比较有用的工具，基本上算白学。得选一个又简单又比较有有价值的功能来实现。</p>]]></description></item><item><title>内存分配器</title><link>https://schaepher.github.io/2020/03/23/memory-allocation/</link><pubDate>Mon, 23 Mar 2020 23:46:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/23/memory-allocation/</guid><description><![CDATA[<h2 id="传统的内存分配和现代的内存分配">传统的内存分配和现代的内存分配</h2>
<p>传统的内存分配是在需要内存的时候使用 <code>malloc()</code> 函数直接向操作系统申请内存，在释放内存的时候用 <code>free()</code> 把内存还给操作系统。</p>
<blockquote>
<p>malloc = memory allocate</p></blockquote>
<p>直接使用这两个函数来管理内存的问题在于，每次申请内存都是一个很耗时的操作，而且频繁申请和释放内存会导致内存有很多碎片（外部碎片）。</p>]]></description></item><item><title>【数据结构】Map （映射）的各种实现</title><link>https://schaepher.github.io/2020/03/15/map/</link><pubDate>Sun, 15 Mar 2020 16:59:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/15/map/</guid><description>&lt;blockquote>
&lt;p>In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. —— wikipedia&lt;br>
在计算机科学中，关联数组、映射、符号表或者字典是一种由一系列(键、值)对组成的集合，且集合中的每个键最多出现一次。 —— 维基百科&lt;/p></description></item></channel></rss>