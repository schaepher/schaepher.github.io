<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PHP - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/php/</link><description>PHP - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 29 Apr 2020 12:41:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/php/" rel="self" type="application/rss+xml"/><item><title>PHP 语言使用细节</title><link>https://schaepher.github.io/2020/04/29/php-detail/</link><pubDate>Wed, 29 Apr 2020 12:41:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/04/29/php-detail/</guid><description><![CDATA[<ol>
<li>
<p><code>array_merge()</code> 、<code>array_combine()</code> 和 <code>+</code> 处理 key 冲突的区别</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">操作</th>
          <th style="text-align: left">数字 key</th>
          <th style="text-align: left">字符串 key</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">array_merge</td>
          <td style="text-align: left">自增</td>
          <td style="text-align: left">覆盖已存在值</td>
      </tr>
      <tr>
          <td style="text-align: left">+</td>
          <td style="text-align: left">使用已存在值</td>
          <td style="text-align: left">使用已存在值</td>
      </tr>
      <tr>
          <td style="text-align: left">array_combine</td>
          <td style="text-align: left">覆盖已存在值</td>
          <td style="text-align: left">覆盖已存在值</td>
      </tr>
  </tbody>
</table>
<p>通常使用 array_merge 比 <code>+</code> 多。<code>+</code> 的使用场景例如以数字 ID 为 key 做深度遍历的时候，由于数组会加上子节点。如果用 array_merge，则会使 key 重制，并从 0 递增。</p>]]></description></item><item><title>编译和调试 PHP</title><link>https://schaepher.github.io/2020/04/01/php-compile/</link><pubDate>Wed, 01 Apr 2020 21:00:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/04/01/php-compile/</guid><description><![CDATA[<h2 id="编译">编译</h2>
<p>基本上按照官方的来就行了：</p>
<p><a href="https://github.com/Microsoft/php-sdk-binary-tools" target="_blank" rel="noopener noreffer ">https://github.com/Microsoft/php-sdk-binary-tools</a></p>
<!-- more -->
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/Microsoft/php-sdk-binary-tools.git c:<span class="se">\p</span>hp-sdk
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> c:<span class="se">\p</span>hp-sdk
</span></span><span class="line"><span class="cl">git checkout php-sdk-2.2.0
</span></span><span class="line"><span class="cl">./phpsdk-vc15-x64.bat
</span></span><span class="line"><span class="cl">phpsdk_buildtree phpmaster
</span></span><span class="line"><span class="cl">git clone https://github.com/php/php-src.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> php-src
</span></span><span class="line"><span class="cl">phpsdk_deps --update --branch 7.4
</span></span><span class="line"><span class="cl">buildconf <span class="o">&amp;&amp;</span> configure --enable-cli <span class="o">&amp;&amp;</span> nmake</span></span></code></pre></div></div>
<p>注意 <code>phpsdk_deps --update --branch 7.4</code> 这一个命令。官方例子是 master，但我执行的时候会报：</p>]]></description></item><item><title>【PHP 源码】PHP 函数调用</title><link>https://schaepher.github.io/2020/03/30/php-function-call/</link><pubDate>Mon, 30 Mar 2020 23:25:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/php-function-call/</guid><description><![CDATA[<h2 id="想法">想法</h2>
<p>我以前对于 C 语言的印象是有很强的确定性，而 PHP 在执行的时候会被翻译为 C 语言执行，所以一直很好奇 PHP 怎么调用底层函数。</p>
<p>换句话说就是已知函数名字的情况下如何调用 C 语言中对应名字的函数？</p>]]></description></item><item><title>【PHP 源码】PHP 函数注册</title><link>https://schaepher.github.io/2020/03/30/php-function-regist/</link><pubDate>Mon, 30 Mar 2020 23:25:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/php-function-regist/</guid><description><![CDATA[<h1 id="函数的注册">函数的注册</h1>
<p>调用顺序为：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">- main
</span></span><span class="line"><span class="cl">-- php_cli_startup
</span></span><span class="line"><span class="cl">--- php_module_startup
</span></span><span class="line"><span class="cl">---- zend_startup
</span></span><span class="line"><span class="cl">----- zend_startup_builtin_function
</span></span><span class="line"><span class="cl">------ zend_register_module_ex(*module)
</span></span><span class="line"><span class="cl">------- zend_register_functions(module-&gt;functions)</span></span></code></pre></div></div>
<!-- more -->
<p><code>sapi/cli/php_cli.c</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">sapi_module_struct</span> <span class="o">*</span><span class="n">sapi_module</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cli_sapi_module</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="cm">/* startup after we get the above ini override se we get things right */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">sapi_module</span><span class="o">-&gt;</span><span class="nf">startup</span><span class="p">(</span><span class="n">sapi_module</span><span class="p">)</span> <span class="o">==</span> <span class="n">FAILURE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">exit_status</span> <span class="o">=</span> <span class="nf">do_cli</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div></div>
<p><code>main/SAPI.h</code></p>]]></description></item><item><title>PHP sort 源码</title><link>https://schaepher.github.io/2020/03/30/php-sort/</link><pubDate>Mon, 30 Mar 2020 23:25:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/php-sort/</guid><description><![CDATA[<p><code>ext/standard/array.c</code></p>
<!-- more -->
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* {{{ proto bool sort(array &amp;array_arg [, int sort_flags])
</span></span></span><span class="line"><span class="cl"><span class="cm">   Sort an array */</span>
</span></span><span class="line"><span class="cl"><span class="nf">PHP_FUNCTION</span><span class="p">(</span><span class="n">sort</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">zval</span> <span class="o">*</span><span class="n">array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_long</span> <span class="n">sort_type</span> <span class="o">=</span> <span class="n">PHP_SORT_REGULAR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">compare_func_t</span> <span class="n">cmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">ZEND_PARSE_PARAMETERS_START</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Z_PARAM_ARRAY_EX</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">Z_PARAM_OPTIONAL</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Z_PARAM_LONG</span><span class="p">(</span><span class="n">sort_type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ZEND_PARSE_PARAMETERS_END_EX</span><span class="p">(</span><span class="n">RETURN_FALSE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">cmp</span> <span class="o">=</span> <span class="nf">php_get_data_compare_func</span><span class="p">(</span><span class="n">sort_type</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>  <span class="c1">// 根据 sort_flags 选择比较函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nf">zend_hash_sort</span><span class="p">(</span><span class="nf">Z_ARRVAL_P</span><span class="p">(</span><span class="n">array</span><span class="p">),</span> <span class="n">cmp</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">FAILURE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">RETURN_FALSE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">RETURN_TRUE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>接下来找 zend_hash_sort 。</p>
<p><code>Zend/zend_hash.h</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define zend_hash_sort(ht, compare_func, renumber) \
</span></span></span><span class="line"><span class="cl"><span class="cp">	zend_hash_sort_ex(ht, zend_sort, compare_func, renumber)</span></span></span></code></pre></div></div>
<p>用于排序的算法是 zend_sort 。</p>]]></description></item><item><title>阅读 PHP 源码</title><link>https://schaepher.github.io/2020/03/30/read-php-src/</link><pubDate>Mon, 30 Mar 2020 23:25:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/read-php-src/</guid><description><![CDATA[<p>从数组入手。</p>
<p>数组相关函数是 PHP 扩展的一部分，扩展名为 <code>standard</code>，执行 <code>php -m</code> 可以看到该扩展。</p>
<p>该扩展的源码在 PHP 源码包的 <code>ext/standard</code> ，其中数组相关函数的定义在 <code>ext/standard/array.c</code> 。</p>]]></description></item><item><title>PHP 对象</title><link>https://schaepher.github.io/2020/03/30/php-object/</link><pubDate>Mon, 30 Mar 2020 12:49:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/php-object/</guid><description><![CDATA[<p>创建对象：</p>
<p><code>zend_objects.c</code></p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">ZEND_API</span> <span class="n">zend_object</span><span class="o">*</span> <span class="n">ZEND_FASTCALL</span> <span class="nf">zend_objects_new</span><span class="p">(</span><span class="n">zend_class_entry</span> <span class="o">*</span><span class="n">ce</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_object</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="nf">emalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">zend_object</span><span class="p">)</span> <span class="o">+</span> <span class="nf">zend_object_properties_size</span><span class="p">(</span><span class="n">ce</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">_zend_object_std_init</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">ce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">object</span><span class="o">-&gt;</span><span class="n">handlers</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">std_object_handlers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">object</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<!-- more -->
<p><code>zend_object_handlers.c</code></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">ZEND_API</span> <span class="k">const</span> <span class="n">zend_object_handlers</span> <span class="n">std_object_handlers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="mi">0</span><span class="p">,</span>										<span class="cm">/* offset */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">zend_object_std_dtor</span><span class="p">,</span>					<span class="cm">/* free_obj */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_objects_destroy_object</span><span class="p">,</span>			<span class="cm">/* dtor_obj */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_objects_clone_obj</span><span class="p">,</span>					<span class="cm">/* clone_obj */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_read_property</span><span class="p">,</span>					<span class="cm">/* read_property */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_write_property</span><span class="p">,</span>				<span class="cm">/* write_property */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_read_dimension</span><span class="p">,</span>				<span class="cm">/* read_dimension */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_write_dimension</span><span class="p">,</span>				<span class="cm">/* write_dimension */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_property_ptr_ptr</span><span class="p">,</span>			<span class="cm">/* get_property_ptr_ptr */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* get */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* set */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_has_property</span><span class="p">,</span>					<span class="cm">/* has_property */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_unset_property</span><span class="p">,</span>				<span class="cm">/* unset_property */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_has_dimension</span><span class="p">,</span>					<span class="cm">/* has_dimension */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_unset_dimension</span><span class="p">,</span>				<span class="cm">/* unset_dimension */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_properties</span><span class="p">,</span>				<span class="cm">/* get_properties */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_method</span><span class="p">,</span>					<span class="cm">/* get_method */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* call_method */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_constructor</span><span class="p">,</span>				<span class="cm">/* get_constructor */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_class_name</span><span class="p">,</span>				<span class="cm">/* get_class_name */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_compare_objects</span><span class="p">,</span>				<span class="cm">/* compare_objects */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_cast_object_tostring</span><span class="p">,</span>			<span class="cm">/* cast_object */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* count_elements */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_debug_info</span><span class="p">,</span>				<span class="cm">/* get_debug_info */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_closure</span><span class="p">,</span>					<span class="cm">/* get_closure */</span>
</span></span><span class="line"><span class="cl">	<span class="n">zend_std_get_gc</span><span class="p">,</span>						<span class="cm">/* get_gc */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* do_operation */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* compare */</span>
</span></span><span class="line"><span class="cl">	<span class="nb">NULL</span><span class="p">,</span>									<span class="cm">/* get_properties_for */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>]]></description></item><item><title>PHP 垃圾回收</title><link>https://schaepher.github.io/2020/03/30/php-gc/</link><pubDate>Mon, 30 Mar 2020 12:49:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/30/php-gc/</guid><description><![CDATA[<ol>
<li>每个值容器（zend_value）里面都会有引用计数结构体 zend_rrefcounted</li>
<li>引用计数减少到 0 时进行清除</li>
<li>unset() 将值的引用减少 1</li>
<li>值容器引用在减少 1 后如果不为 0 ，则加入回收池</li>
<li>回收池满后，开始执行回收
<ol>
<li>第一次遍历回收池所有值容器。对所有值容器的引用减 1 。如果是嵌套对象（如数组和对象），则遍历其元素，元素值容器的引用减 1 。
<ul>
<li>这是一个深度遍历的过程。</li>
<li>这里是模拟减 1，减到 0 时不触发回收</li>
</ul>
</li>
<li>第二次遍历回收池所有值容器。对引用计数不为 0 的值容器引用加 1 （恢复到之前的样子），并将其从回收池中移出。</li>
<li>回收池中引用计数为 0 的值容器被作为垃圾清除。</li>
</ol>
</li>
</ol>
<!-- more -->
<p>如：</p>]]></description></item><item><title>内存分配器</title><link>https://schaepher.github.io/2020/03/23/memory-allocation/</link><pubDate>Mon, 23 Mar 2020 23:46:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/23/memory-allocation/</guid><description><![CDATA[<h2 id="传统的内存分配和现代的内存分配">传统的内存分配和现代的内存分配</h2>
<p>传统的内存分配是在需要内存的时候使用 <code>malloc()</code> 函数直接向操作系统申请内存，在释放内存的时候用 <code>free()</code> 把内存还给操作系统。</p>
<blockquote>
<p>malloc = memory allocate</p></blockquote>
<p>直接使用这两个函数来管理内存的问题在于，每次申请内存都是一个很耗时的操作，而且频繁申请和释放内存会导致内存有很多碎片（外部碎片）。</p>]]></description></item><item><title>【数据结构】Map （映射）的各种实现</title><link>https://schaepher.github.io/2020/03/15/map/</link><pubDate>Sun, 15 Mar 2020 16:59:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/15/map/</guid><description>&lt;blockquote>
&lt;p>In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection. —— wikipedia&lt;br>
在计算机科学中，关联数组、映射、符号表或者字典是一种由一系列(键、值)对组成的集合，且集合中的每个键最多出现一次。 —— 维基百科&lt;/p></description></item></channel></rss>