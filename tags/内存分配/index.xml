<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>内存分配 - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><description>内存分配 - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 23 Mar 2020 23:46:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/" rel="self" type="application/rss+xml"/><item><title>内存分配器</title><link>https://schaepher.github.io/2020/03/23/memory-allocation/</link><pubDate>Mon, 23 Mar 2020 23:46:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/23/memory-allocation/</guid><description><![CDATA[<h2 id="传统的内存分配和现代的内存分配">传统的内存分配和现代的内存分配</h2>
<p>传统的内存分配是在需要内存的时候使用 <code>malloc()</code> 函数直接向操作系统申请内存，在释放内存的时候用 <code>free()</code> 把内存还给操作系统。</p>
<blockquote>
<p>malloc = memory allocate</p></blockquote>
<p>直接使用这两个函数来管理内存的问题在于，每次申请内存都是一个很耗时的操作，而且频繁申请和释放内存会导致内存有很多碎片（外部碎片）。</p>]]></description></item></channel></rss>