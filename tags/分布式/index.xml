<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>分布式 - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link><description>分布式 - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 11 Feb 2023 14:00:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/" rel="self" type="application/rss+xml"/><item><title>ETCD Meta</title><link>https://schaepher.github.io/2023/02/11/etcd-meta/</link><pubDate>Sat, 11 Feb 2023 14:00:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2023/02/11/etcd-meta/</guid><description></description></item><item><title>名字服务（Naming Service）</title><link>https://schaepher.github.io/2022/10/13/naming-service/</link><pubDate>Thu, 13 Oct 2022 12:00:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2022/10/13/naming-service/</guid><description><![CDATA[<h2 id="数据同步">数据同步</h2>
<ol>
<li>服务端和服务端的同步</li>
<li>客户端和服务端的同步</li>
</ol>
<h3 id="服务端和服务端的同步">服务端和服务端的同步</h3>]]></description></item><item><title>分布式的几个要点</title><link>https://schaepher.github.io/2021/11/03/distributed-system/</link><pubDate>Wed, 03 Nov 2021 18:11:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2021/11/03/distributed-system/</guid><description><![CDATA[<h1 id="过载保护">过载保护</h1>
<p><a href="http://sharecore.net/post/%E8%BF%87%E8%BD%BD%E4%BF%9D%E6%8A%A4%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/" target="_blank" rel="noopener noreffer ">http://sharecore.net/post/%E8%BF%87%E8%BD%BD%E4%BF%9D%E6%8A%A4%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</a></p>
<h2 id="令牌桶算法">令牌桶算法</h2>
<p>按一定速率往桶里放令牌，收到请求的时候从桶里取出。如果取不到令牌，则拒绝处理请求。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-go">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">time</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sync</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">tokens</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">capacity</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">rate</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">latestPutTime</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Unix</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">lock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nb">min</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="nx">b</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getToken</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 放入令牌</span>
</span></span><span class="line"><span class="cl">    <span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Unix</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokens</span> <span class="p">=</span> <span class="p">(</span><span class="nx">now</span><span class="o">-</span><span class="nx">latestPutTime</span><span class="p">)</span><span class="o">*</span><span class="nx">rate</span>
</span></span><span class="line"><span class="cl">    <span class="nx">latestPutTime</span> <span class="p">=</span> <span class="nx">now</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 桶如果溢出，使用固定限制</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokens</span> <span class="p">=</span> <span class="nb">min</span><span class="p">(</span><span class="nx">capacity</span><span class="p">,</span> <span class="nx">tokens</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">tokens</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">token</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="漏桶算法">漏桶算法</h2>
<p>与桶令牌算法相似。不再是放入令牌取，而是往里面塞令牌。桶定时漏掉一些令牌。</p>]]></description></item><item><title>分布式锁</title><link>https://schaepher.github.io/2020/11/16/distributed-lock/</link><pubDate>Mon, 16 Nov 2020 12:44:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/11/16/distributed-lock/</guid><description>&lt;p>分布式锁用于解决分布式系统的资源竞争问题。例如避免多台服务器同时修改一个数据导致数据出错。&lt;/p>
&lt;p>一个比较简单的场景是基于 crontab 的定时任务。当系统采用单机时，可以直接把定时任务放到 crontab 触发。但是如果要为系统部署一台热备，就得在主机故障后让备机自动代替主机触发定时任务的功能。&lt;/p></description></item></channel></rss>