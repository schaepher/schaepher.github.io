<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>设计模式 - 标签 - Schaepher's Blog</title><link>https://schaepher.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>设计模式 - 标签 - Schaepher's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 27 Mar 2020 01:05:00 +0000</lastBuildDate><atom:link href="https://schaepher.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml"/><item><title>设计模式</title><link>https://schaepher.github.io/2020/03/27/design-patterns/</link><pubDate>Fri, 27 Mar 2020 01:05:00 +0000</pubDate><author>xxxx</author><guid>https://schaepher.github.io/2020/03/27/design-patterns/</guid><description><![CDATA[<h2 id="概念说明">概念说明</h2>
<p>在了解各种模式之前，要把自己代入一个基础库的开发者（库作者）的角度。</p>
<p>客户端：  使用库的人</p>
<p>主体：  实际实现功能的库类</p>
<h2 id="代理模式proxy--适配器模式adapter">代理模式（Proxy） &amp; 适配器模式（Adapter）</h2>
<p>两者都是在客户端和主体之间构建一个中间层，让客户端间接访问主体。</p>]]></description></item></channel></rss>